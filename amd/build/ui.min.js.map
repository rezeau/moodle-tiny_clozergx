{"version":3,"file":"ui.min.js","sources":["../src/ui.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Plugin tiny_clozergx for TinyMCE v6 in Moodle.\n *\n * @module      tiny_clozergx/ui\n * @copyright   2023 MoodleDACH\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport ModalEvents from 'core/modal_events';\nimport Modal from 'core/modal';\nimport ModalFactory from 'core/modal_factory';\nimport Mustache from 'core/mustache';\nimport {get_strings as getStrings} from 'core/str';\nimport {component} from './common';\n\n// Helper functions.\nconst isNull = a => a === null || a === undefined;\nconst strdecode = t => String(t).replace(/\\\\(#|\\}|~)/g, '$1');\nconst strencode = t => String(t).replace(/(#|\\}|~)/g, '\\\\$1');\nconst indexOfNode = (list, node) => {\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] === node) {\n      return i;\n    }\n  }\n  return -1;\n};\nconst getUuid = function() {\n  if (!isNull(crypto.randomUUID)) {\n    return crypto.randomUUID();\n  }\n  return 'ed-cloze-' + Math.floor(Math.random() * 100000).toString();\n};\n// Grade Selector value when custom percentage is selected.\nconst selectCustomPercent = '__custom__';\n// This is a specific helper function to return the options html for the fraction select element.\nconst getFractionOptions = s => {\n  const attrSel = ' selected=\"selected\"';\n  let isSel = s === '=' ? attrSel : '';\n  let html = `<option value=\"\">${STR.incorrect}</option><option value=\"=\"${isSel}>${STR.correct}</option>`;\n  FRACTIONS.forEach(item => {\n    isSel = item.value.toString() === s ? attrSel : '';\n    html += `<option value=\"${item.value}\"${isSel}>${item.value}%</option>`;\n  });\n  isSel = s !== '' && html.indexOf(attrSel) === -1 ? attrSel : '';\n  html += `<option value=\"${selectCustomPercent}\"${isSel}>${STR.custom_grade}</option>`;\n  return html;\n};\n// Check if the value is a custom grade value (in order to show the input field).\nconst isCustomGrade = s => {\n  if (s === '=' || s === '') {\n    return false;\n  }\n  let found = false;\n  FRACTIONS.forEach(item => {\n    if (item.value.toString() === s) {\n      found = true;\n    }\n  });\n  return !found;\n};\n// Marker class and the whole span element that is used to encapsulate the cloze question text.\nconst markerClass = 'cloze-question-marker';\nconst markerSpan = '<span contenteditable=\"false\" class=\"' + markerClass + '\" data-mce-contenteditable=\"false\">';\n// Regex to recognize the question string in the text e.g. {1:NUMERICAL:...} or {:MULTICHOICE:...}\n// eslint-disable-next-line max-len\nconst reQtype = /\\{([0-9]*):(MULTICHOICE(_H|_V|_S|_HS|_VS)?|MULTIRESPONSE(_H|_S|_HS)?|NUMERICAL|SHORTANSWER(_C)?|SAC?|REGEXP(_C)?|RXC?|NM|MWC?|M[CR](V|H|VS|HS)?):(.*?)\\}/g;\n\n// CSS classes that are used in the modal dialogue.\nconst CSS = {\n  ANSWER: 'tiny_clozergx_answer',\n  ANSWERS: 'tiny_clozergx_answers',\n  ADD: 'tiny_clozergx_add',\n  CANCEL: 'tiny_clozergx_cancel',\n  DELETE: 'tiny_clozergx_delete',\n  FEEDBACK: 'tiny_clozergx_feedback',\n  FRACTION: 'tiny_clozergx_fraction',\n  FRAC_CUSTOM: 'tiny_clozergx_frac_custom',\n  LEFT: 'tiny_clozergx_col0',\n  LOWER: 'tiny_clozergx_down',\n  RIGHT: 'tiny_clozergx_col1',\n  MARKS: 'tiny_clozergx_marks',\n  DUPLICATE: 'tiny_clozergx_duplicate',\n  RAISE: 'tiny_clozergx_up',\n  SUBMIT: 'tiny_clozergx_submit',\n  SUMMARY: 'tiny_clozergx_summary',\n  TOLERANCE: 'tiny_clozergx_tolerance',\n  TYPE: 'tiny_clozergx_qtype'\n};\nconst TEMPLATE = {\n  FORM: '<div class=\"tiny_cloze\">' +\n    '<p>{{name}} ({{qtype}})</p>' +\n    '<form name=\"tiny_cloze_form\">' +\n    '<div class=\"row ml-0\">' +\n    '<div class=\"form-group\">' +\n    '<label for=\"{{elementid}}_mark\">{{STR.defaultmark}}</label>' +\n    '<input id=\"{{elementid}}_mark\" type=\"text\" value=\"{{marks}}\" ' +\n    'class=\"{{CSS.MARKS}} form-control d-inline mx-1\" />' +\n    '<a class=\"{{CSS.ADD}}\" title=\"{{STR.addmoreanswerblanks}}\">' +\n    '<img class=\"icon_smallicon\" src=\"' +\n    M.util.image_url('t/add', 'core') + '\" alt=\"{{STR.addmoreanswerblanks}}\"></a>' +\n    '</div>' +\n    '<div class=\"msg-error hidden\"></div>' +\n    '</div>' +\n    '<div class=\"{{CSS.ANSWERS}} mb-3\">' +\n    '<ol class=\"pl-3\">{{#answerdata}}' +\n    '<li class=\"mt-3\"><div class=\"row ml-0\">' +\n    '<div class=\"{{CSS.LEFT}} form-group\">' +\n    '<label for=\"{{id}}_answer\">{{STR.answer}}</label>' +\n    '<input id=\"{{id}}_answer\" type=\"text\" value=\"{{answer}}\" ' +\n    'class=\"{{CSS.ANSWER}} form-control d-inline mx-2\" />' +\n    '</div>' +\n    '<div class=\"{{CSS.LEFT}} form-group\">' +\n    '<a class=\"{{CSS.ADD}}\" title=\"{{STR.addmoreanswerblanks}}\">' +\n    '<img class=\"icon_smallicon\" src=\"' +\n    M.util.image_url('t/add', 'core') + '\" alt=\"{{STR.addmoreanswerblanks}}\"></a>' +\n    '<a class=\"{{CSS.DELETE}}\" title=\"{{STR.delete}}\">' +\n    '<img class=\"icon_smallicon\" src=\"' +\n    M.util.image_url('t/delete', 'core') + '\" alt=\"{{STR.delete}}\"></a>' +\n    '<a class=\"{{CSS.RAISE}}\" title=\"{{STR.up}}\">' +\n    '<img class=\"icon_smallicon\" src=\"' +\n    M.util.image_url('t/up', 'core') + '\" alt=\"{{STR.up}}\"></a>' +\n    '<a class=\"{{CSS.LOWER}}\" title=\"{{STR.down}}\">' +\n    '<img class=\"icon_smallicon\" src=\"' +\n    M.util.image_url('t/down', 'core') + '\" alt=\"{{STR.down}}\"></a>' +\n    '</div>' +\n    '</div>' +\n    '{{#numerical}}' +\n    '<div class=\"row\">' +\n    '<div class=\"{{CSS.RIGHT}} form-group\">' +\n    '<label for=\"{{id}}_tolerance\">{{{STR.tolerance}}}</label>' +\n    '<input id=\"{{id}}_tolerance\" type=\"text\" value=\"{{tolerance}}\" ' +\n    'class=\"{{CSS.TOLERANCE}} form-control d-inline mx-2\" />' +\n    '</div>' +\n    '</div>' +\n    '{{/numerical}}' +\n    '<div class=\"row\">' +\n    '<div class=\"{{CSS.RIGHT}} form-group\">' +\n    '<label for=\"{{id}}_feedback\">{{STR.feedback}}</label>' +\n    '<input id=\"{{id}}_feedback\" type=\"text\" value=\"{{feedback}}\" ' +\n    'class=\"{{CSS.FEEDBACK}} form-control d-inline mx-2\" />' +\n    '</div>' +\n    '<div class=\"{{CSS.RIGHT}} form-group\">' +\n    '<label id=\"{{id}}_grade\">{{STR.grade}}</label>' +\n    '<select id=\"{{id}}_grade\" class=\"{{CSS.FRACTION}} custom-select mx-2\">' +\n    '{{{fractionOptions}}}' +\n    '</select>' +\n    '</div>' +\n    '<div class=\"{{CSS.RIGHT}} form-group{{^isCustomGrade}} hidden{{/isCustomGrade}}\">' +\n    '<input id=\"{{id}}_grade_custom\" type=\"text\"{{#isCustomGrade}} value=\"{{fraction}}\"{{/isCustomGrade}} ' +\n    'class=\"{{CSS.FRAC_CUSTOM}} form-control d-inline mx-2\" style=\"width: 4rem;\" />%' +\n    '</div>' +\n    '</div></li>' +\n    '{{/answerdata}}</ol></div>' +\n    '</form>' +\n    '</div>',\n  TYPE: '<div class=\"tiny_cloze mt-0 mx-2 mb-2\">' +\n    '<p>{{STR.chooseqtypetoadd}}</p>' +\n    '<form name=\"tiny_cloze_form\">' +\n    '<div class=\"{{CSS.TYPE}} form-check\">' +\n    '{{#types}}' +\n    '<div class=\"option\">' +\n    '<input name=\"qtype\" id=\"qtype_qtype_{{type}}\" value=\"{{type}}\" type=\"radio\" class=\"form-check-input\">' +\n    '<label for=\"qtype_qtype_{{type}}\">' +\n    '<span class=\"typename\">{{type}}</span>' +\n    '<span class=\"{{CSS.SUMMARY}}\"><h6>{{name}}</h6><p>{{summary}}</p>' +\n    '<ul>{{#options}}' +\n    '<li>{{.}}</li>' +\n    '{{/options}}</ul>' +\n    '</span>' +\n    '</label></div>' +\n    '{{/types}}</div>' +\n    '</form></div>',\n  FOOTER: '<button type=\"button\" class=\"btn btn-secondary\" data-action=\"cancel\">{{cancel}}</button>' +\n    '<button type=\"button\" class=\"btn btn-primary\" data-action=\"save\">{{submit}}</button>',\n};\n  const FRACTIONS = [\n    {value: 100},\n    {value: 50},\n    {value: 0},\n  ];\n\n// Language strings used in the modal dialogue.\nconst STR = {};\nconst getStr = async() => {\n  getStrings([\n    {key: 'answer', component: 'question'},\n    {key: 'chooseqtypetoadd', component: 'question'},\n    {key: 'defaultmark', component: 'question'},\n    {key: 'feedback', component: 'question'},\n    {key: 'correct', component: 'question'},\n    {key: 'incorrect', component: 'question'},\n    {key: 'addmoreanswerblanks', component: 'qtype_calculated'},\n    {key: 'delete', component: 'core'},\n    {key: 'up', component: 'core'},\n    {key: 'down', component: 'core'},\n    {key: 'tolerance', component: 'qtype_calculated'},\n    {key: 'grade', component: 'grades'},\n    {key: 'caseno', component: 'mod_quiz'},\n    {key: 'caseyes', component: 'mod_quiz'},\n    {key: 'answersingleno', component: 'qtype_multichoice'},\n    {key: 'answersingleyes', component: 'qtype_multichoice'},\n    {key: 'layoutselectinline', component: 'qtype_multianswer'},\n    {key: 'layouthorizontal', component: 'qtype_multianswer'},\n    {key: 'layoutvertical', component: 'qtype_multianswer'},\n    {key: 'shufflewithin', component: 'mod_quiz'},\n    {key: 'layoutmultiple_horizontal', component: 'qtype_multianswer'},\n    {key: 'layoutmultiple_vertical', component: 'qtype_multianswer'},\n    {key: 'pluginnamesummary', component: 'qtype_multichoice'},\n    {key: 'pluginnamesummary', component: 'qtype_shortanswer'},\n    {key: 'pluginnamesummary', component: 'qtype_regexp'},\n    {key: 'pluginnamesummary', component: 'qtype_numerical'},\n    {key: 'multichoice', component},\n    {key: 'multiresponse', component},\n    {key: 'numerical', component: 'mod_quiz'},\n    {key: 'shortanswer', component: 'mod_quiz'},\n    {key: 'regexp', component: 'qtype_regexp'},\n    {key: 'cancel', component: 'core'},\n    {key: 'select', component},\n    {key: 'insert', component},\n    {key: 'pluginname', component},\n    {key: 'customgrade', component},\n    {key: 'err_custom_rate', component},\n    {key: 'err_empty_answer', component},\n    {key: 'err_none_correct', component},\n    {key: 'err_not_numeric', component},\n  ]).then(function() {\n    const args = Array.from(arguments);\n    [\n      'answer',\n      'chooseqtypetoadd',\n      'defaultmark',\n      'feedback',\n      'correct',\n      'incorrect',\n      'addmoreanswerblanks',\n      'delete',\n      'up',\n      'down',\n      'tolerance',\n      'grade',\n      'caseno',\n      'caseyes',\n      'singleno',\n      'singleyes',\n      'selectinline',\n      'horizontal',\n      'vertical',\n      'shuffle',\n      'multi_horizontal',\n      'multi_vertical',\n      'summary_multichoice',\n      'summary_shortanswer',\n      'summary_regexp',\n      'summary_numerical',\n      'multichoice',\n      'multiresponse',\n      'numerical',\n      'shortanswer',\n      'regexp',\n      'btn_cancel',\n      'btn_select',\n      'btn_insert',\n      'title',\n      'custom_grade',\n      'err_custom_rate',\n      'err_empty_answer',\n      'err_none_correct',\n      'err_not_numeric',\n    ].map((l, i) => {\n      STR[l] = args[0][i];\n      return ''; // Make the linter happy.\n    });\n    return ''; // Make the linter happy.\n  }).catch(() => {\n    return '';\n  });\n};\nconst getQuestionTypes = function() {\n  return [\n    {\n      'type': 'MULTICHOICE',\n      'abbr': ['MC'],\n      'name': STR.multichoice,\n      'summary': STR.summary_multichoice,\n      'options': [STR.selectinline, STR.singleyes],\n    },\n    {\n      'type': 'MULTICHOICE_H',\n      'abbr': ['MCH'],\n      'name': STR.multichoice,\n      'summary': STR.summary_multichoice,\n      'options': [STR.horizontal, STR.singleyes],\n    },\n    {\n      'type': 'MULTICHOICE_V',\n      'abbr': ['MCV'],\n      'name': STR.multichoice,\n      'summary': STR.summary_multichoice,\n      'options': [STR.vertical, STR.singleyes],\n    },\n    {\n      'type': 'MULTICHOICE_S',\n      'abbr': ['MCS'],\n      'name': STR.multichoice,\n      'summary': STR.summary_multichoice,\n      'options': [STR.selectinline, STR.shuffle, STR.singleyes],\n    },\n    {\n      'type': 'MULTICHOICE_HS',\n      'abbr': ['MCHS'],\n      'name': STR.multichoice,\n      'summary': STR.summary_multichoice,\n      'options': [STR.horizontal, STR.shuffle, STR.singleyes],\n    },\n    {\n      'type': 'MULTICHOICE_VS',\n      'abbr': ['MCVS'],\n      'name': STR.multichoice,\n      'summary': STR.summary_multichoice,\n      'options': [STR.vertical, STR.shuffle, STR.singleyes],\n    },\n    {\n      'type': 'MULTIRESPONSE',\n      'abbr': ['MR'],\n      'name': STR.multiresponse,\n      'summary': STR.summary_multichoice,\n      'options': [STR.multi_vertical, STR.singleno],\n    },\n    {\n      'type': 'MULTIRESPONSE_H',\n      'abbr': ['MRH'],\n      'name': STR.multiresponse,\n      'summary': STR.summary_multichoice,\n      'options': [STR.multi_horizontal, STR.singleno],\n    },\n    {\n      'type': 'MULTIRESPONSE_S',\n      'abbr': ['MRS'],\n      'name': STR.multiresponse,\n      'summary': STR.summary_multichoice,\n      'options': [STR.multi_vertical, STR.shuffle, STR.singleno],\n    },\n    {\n      'type': 'MULTIRESPONSE_HS',\n      'abbr': ['MRHS'],\n      'name': STR.multiresponse,\n      'summary': STR.summary_multichoice,\n      'options': [STR.multi_horizontal, STR.shuffle, STR.singleno],\n    },\n    {\n      'type': 'NUMERICAL',\n      'abbr': ['NM'],\n      'name': STR.numerical,\n      'summary': STR.summary_numerical,\n    },\n    {\n      'type': 'SHORTANSWER',\n      'abbr': ['SA', 'MW'],\n      'name': STR.shortanswer,\n      'summary': STR.summary_shortanswer,\n      'options': [STR.caseno],\n    },\n    {\n      'type': 'SHORTANSWER_C',\n      'abbr': ['SAC', 'MWC'],\n      'name': STR.shortanswer,\n      'summary': STR.summary_shortanswer,\n      'options': [STR.caseyes],\n    },\n    {\n      'type': 'REGEXP',\n      'abbr': ['RX'],\n      'name': STR.regexp,\n      'summary': STR.summary_regexp,\n      'options': [STR.caseno],\n    },\n    {\n      'type': 'REGEXP_C',\n      'abbr': ['RXC'],\n      'name': STR.regexp,\n      'summary': STR.summary_regexp,\n      'options': [STR.caseyes],\n    },\n  ];\n};\n\n/**\n * The editor instance that is injected via the onInit() function.\n *\n * @type {tinymce.Editor}\n * @private\n */\nlet _editor = null;\n\n/**\n * A reference to the currently open form.\n *\n * @param _form\n * @type {Node}\n * @private\n */\nlet _form = null;\n\n/**\n * An array containing the current answers options\n *\n * @param _answerdata\n * @type {Array}\n * @private\n */\nlet _answerdata = [];\n\n/**\n * The sub question type to be edited\n *\n * @param _qtype\n * @type {string|null}\n * @private\n */\nlet _qtype = null;\n\n/**\n * Remember the pos of the selected node.\n * @type {number}\n * @private\n */\nlet _selectedOffset = -1;\n\n/**\n * The maximum marks for the sub question\n *\n * @param _marks\n * @type {Integer}\n * @private\n */\nlet _marks = 1;\n\n/**\n * The modal dialogue to be displayed when designing the cloze question types.\n * @type {Modal|null}\n */\nlet _modal = null;\n\n/**\n * If its a normal selection of text, use it for the first answer field.\n * @type {string|null}\n */\nlet _firstAnswer = null;\n\n/**\n * Inject the editor instance and add markers to the cloze question texts.\n * @param {tinymce.Editor} ed\n */\nconst onInit = function(ed) {\n  _editor = ed; // The current editor instance.\n  // Add the marker spans.\n  _addMarkers();\n  // And get the language strings.\n  getStr();\n};\n\n/**\n * Create the modal.\n * @return {Promise<void>}\n * @private\n */\nconst _createModal = async function() {\n  // Create the modal dialogue. Depending on whether we have a selected node or not, the content is different.\n  const cfg = {\n    title: STR.title,\n    templateContext: {\n      elementid: _editor.id\n    },\n    removeOnClose: true,\n    large: true,\n  };\n  if (typeof Modal.create === 'function') {\n    _modal = await Modal.create(cfg);\n  } else {\n    _modal = await ModalFactory.create(cfg);\n  }\n};\n\n/**\n * Display modal dialogue to edit a cloze question. Either a form is displayed to edit subquestion or a list\n * of possible questions is show.\n *\n * @method displayDialogue\n * @private\n */\nconst displayDialogue = async function() {\n  await _createModal();\n\n  // Resolve whether cursor is in a subquestion.\n  var subquestion = resolveSubquestion();\n  if (subquestion) {\n    _firstAnswer = null;\n    // Subquestion found, remember which node of the marker nodes is selected.\n    _selectedOffset = indexOfNode(_editor.dom.select('.' + markerClass), subquestion);\n    _parseSubquestion(subquestion.innerHTML);\n    _setDialogueContent(_qtype);\n  } else {\n    // No subquestion found, no offset to remember.\n    _firstAnswer = _editor.selection.getContent();\n    _selectedOffset = -1;\n    _setDialogueContent();\n  }\n};\n\n/**\n * Search for cloze questions based on a regular expression. All the matching snippets at least contain the cloze\n * question definition. Although Moodle does not support encapsulated other functions within curly brackets, we\n * still try to find the correct closing bracket. The so extracted cloze question is surrounded by a marker span\n * element, that contains attributes so that the content inside the span cannot be modified by the editor (in the\n * textarea). Also, this makes it a lot easier to select the question, edit it in the dialogue and replace the result\n * in the existing text area.\n */\nconst _addMarkers = function() {\n\n  let content = _editor.getContent();\n  let newContent = '';\n\n  // Check if there is already a marker span. In this case we do not have to do anything.\n  if (content.indexOf(markerClass) !== -1) {\n    return;\n  }\n\n  let m;\n  do {\n    m = content.match(reQtype);\n    if (!m) { // No match of a cloze question, then we are done.\n      newContent += content;\n      break;\n    }\n    // Copy the current match to the new string preceded with the <span>.\n    const pos = content.indexOf(m[0]);\n    newContent += content.substring(0, pos) + markerSpan + content.substring(pos, pos + m[0].length);\n    content = content.substring(pos + m[0].length);\n\n    // Count the { in the string, should be just one (the very first one at position 0).\n    let level = (m[0].match(/\\{/g) || []).length;\n    if (level === 1) {\n      // If that's the case, we close the span and the cloze question text is the innerHTML of that marker span.\n      newContent += '</span>';\n      continue; // Look for the next matching cloze question.\n    }\n    // If there are more { than } in the string, then we did not find the corresponding } that belongs to the cloze string.\n    while (level > 1) {\n      const a = content.indexOf('{');\n      const b = content.indexOf('}');\n      if (a > -1 && b > -1 && a < b) { // The { is before another } so remember to find as many } until we back at level 1.\n        level++;\n        newContent = content.substring(0, a);\n        content = content.substring(a + 1);\n      } else if (b > -1) { // We found a closing } to a previously {.\n        newContent = content.substring(0, b);\n        content = content.substring(b + 1);\n        level--;\n      } else {\n        level = 1; // Should not happen, just to stop the endless loop.\n      }\n    }\n    newContent += '</span>';\n  } while (m);\n  _editor.setContent(newContent);\n};\n\n/**\n * Look for the marker span elements around a cloze question and remove that span. Also, the marker for a new\n * node to be inserted would be removed here as well.\n */\nconst _removeMarkers = function() {\n  for (const span of _editor.dom.select('span.' + markerClass)) {\n    _editor.dom.setOuterHTML(span, span.classList.contains('new') ? '' : span.innerHTML);\n  }\n};\n\n/**\n * When the source code view dialogue is show, we must remove the spans around the cloze question strings\n * from the editor content and add them again when the dialogue is closed.\n * Since this event is also triggered when the editor data is saved, we use this function to remove the\n * highlighting content at that time.\n * @param {object} content\n */\nconst onBeforeGetContent = function(content) {\n  if (!isNull(content.source_view) && content.source_view === true) {\n    // If the user clicks on 'Cancel' or the close button on the html\n    // source code dialog view, make sure we re-add the visual styling.\n    var onClose = function() {\n      _editor.off('close', onClose);\n      _addMarkers();\n    };\n    _editor.on('CloseWindow', () => {\n      onClose();\n    });\n    // Remove markers only if modal is not called, otherwise we will lose our new question marker.\n    if (!_modal) {\n      _removeMarkers();\n    }\n  }\n};\n\n/**\n * Fires when the form containing the editor is submitted.\n */\nconst onSubmit = function() {\n  _removeMarkers();\n};\n\n/**\n * Set the dialogue content for the tool, attaching any required events. Either the modal dialogue displays\n * a list of the question types for the form for a particular question to edit. The set content is also\n * called when the form has changed (up or down move, deletion and adding a response). We must be aware of that\n * an event to the dialogue buttons must be attached once only. Therefore, when the form content is modified, only\n * the form events for the answers are set again, the general events are nor (nomodalevents is true then).\n *\n * @method _setDialogueContent\n * @param {String} qtype The question type to be used\n * @param {boolean} nomodalevents Optional do not attach events.\n * @private\n */\nconst _setDialogueContent = function(qtype, nomodalevents) {\n  const footer = Mustache.render(TEMPLATE.FOOTER, {\n    cancel: STR.btn_cancel,\n    submit: !qtype ? STR.btn_select : STR.btn_insert,\n  });\n  let contentText;\n  if (!qtype) {\n    contentText = Mustache.render(TEMPLATE.TYPE, {\n      CSS: CSS,\n      STR: STR,\n      qtype: _qtype,\n      types: getQuestionTypes()\n    });\n  } else {\n    contentText = Mustache.render(TEMPLATE.FORM, {\n      CSS: CSS,\n      STR: STR,\n      answerdata: _answerdata,\n      elementid: getUuid(),\n      qtype: _qtype,\n      name: getQuestionTypes().filter(q => _qtype === q.type)[0].name,\n      marks: _marks,\n      numerical: (_qtype === 'NUMERICAL' || _qtype === 'NM')\n    });\n  }\n  _modal.setBody(contentText);\n  _modal.setFooter(footer);\n  _modal.show();\n  const $root = _modal.getRoot();\n  _form = $root.get(0).querySelector('form');\n\n  if (!nomodalevents) {\n    _modal.registerEventListeners();\n    _modal.registerCloseOnSave();\n    _modal.registerCloseOnCancel();\n    $root.on(ModalEvents.cancel, _cancel);\n\n    if (!qtype) { // For the question list we need the choice handler only, and we are done.\n      $root.on(ModalEvents.save, _choiceHandler);\n      return;\n    } // Handler to add the question string to the editor content.\n    $root.on(ModalEvents.save, _setSubquestion);\n  }\n  // The form needs events for the icons to move up/down, add or delete a response.\n  const getTarget = e => {\n    let p = e.target;\n    while (!isNull(p) && p.nodeType === 1 && p.tagName !== 'A') {\n      p = p.parentNode;\n    }\n    if (isNull(p.classList)) {\n      return null;\n    }\n    return p;\n  };\n\n  _form.addEventListener('click', e => {\n    const p = getTarget(e);\n    if (isNull(p)) {\n      return;\n    }\n    if (p.classList.contains(CSS.DELETE)) {\n      e.preventDefault();\n      _deleteAnswer(p);\n      return;\n    }\n    if (p.classList.contains(CSS.ADD)) {\n      e.preventDefault();\n      _addAnswer(p);\n      return;\n    }\n    if (p.classList.contains(CSS.LOWER)) {\n      e.preventDefault();\n      _lowerAnswer(p);\n      return;\n    }\n    if (p.classList.contains(CSS.RAISE)) {\n      e.preventDefault();\n      _raiseAnswer(p);\n    }\n  });\n  _form.addEventListener('keyup', e => {\n    const p = getTarget(e);\n    if (isNull(p)) {\n      return;\n    }\n    if (p.classList.contains(CSS.ANSWER) || p.classList.contains(CSS.FEEDBACK)) {\n      e.preventDefault();\n      _addAnswer(p);\n    }\n  });\n  _form.querySelectorAll('.' + CSS.FRACTION).forEach((sel) => {\n    sel.addEventListener('change', e => {\n      const id = e.target.getAttribute('id');\n      if (e.target.value === selectCustomPercent) {\n        document.getElementById(id + '_custom').parentNode.classList.remove('hidden');\n      } else {\n        document.getElementById(id + '_custom').parentNode.classList.add('hidden');\n      }\n    });\n  });\n};\n\n/**\n * Handle question choice.\n *\n * @method _choiceHandler\n * @private\n * @param {Event} e Event from button click in chooser\n */\nconst _choiceHandler = function(e) {\n  e.preventDefault();\n  let qtype = _form.querySelector('input[name=qtype]:checked');\n  if (qtype) {\n    _qtype = qtype.value;\n  }\n  // For numerical and short answer and regexp questions we offer one response field only. All other\n  // question types have three empty response fields.\n  const max = (_qtype.indexOf('SHORTANSWER') !== -1 ||_qtype.indexOf('REGEXP') !== -1 || _qtype === 'NUMERICAL') ? 1 : 3;\n  const blankAnswer = {\n    id: getUuid(),\n    answer: '',\n    feedback: '',\n    fraction: 100,\n    fractionOptions: getFractionOptions(''),\n    tolerance: 0,\n    isCustomGrade: false,\n  };\n  _answerdata = [];\n  for (let x = 0; x < max; x++) {\n    _answerdata.push({...blankAnswer, id: getUuid()});\n  }\n  // The first response field gets the default grade correct.\n  _answerdata[0].fractionOptions = getFractionOptions('=');\n  // In case the user seleced some text, this is used as the first answer.\n  if (_firstAnswer) {\n    _answerdata[0].answer = _firstAnswer;\n  }\n  _modal.destroy();\n  // Our choice is stored in _qtype. We need to create the modal dialogue with the form now.\n  _createModal().then(() => {\n    _setDialogueContent(_qtype);\n    _form.querySelector('.' + CSS.ANSWER).focus();\n    return ''; // Make the linter happy.\n  }).catch(() => {\n      return '';\n  });\n};\n\n/**\n * Parse question and set properties found.\n *\n * @method _parseSubquestion\n * @private\n * @param {String} question The question string\n */\nconst _parseSubquestion = function(question) {\n  _answerdata = []; // Flush answers to have an empty dialogue if something goes wrong parsing the question string.\n  const parts = reQtype.exec(question);\n  reQtype.lastIndex = 0; // Reset lastIndex so that the next match starts from the beginning of the question string.\n  if (!parts) {\n    return;\n  }\n  _marks = parts[1];\n  _qtype = parts[2];\n  // Convert the short notation to the long form e.g. SA to SHORTANSWER.\n  if (_qtype.length < 5) {\n    getQuestionTypes().forEach(l => {\n      for (const a of l.abbr) {\n        if (a === _qtype) {\n          _qtype = l.type;\n          return;\n        }\n      }\n    });\n  }\n  const answers = parts[8].match(/(\\\\.|[^~])*/g);\n  if (!answers) {\n    return;\n  }\n  answers.forEach(function(answer) {\n    const options = /^(%(-?[.0-9]+)%|(=?))((\\\\.|[^#])*)#?(.*)/.exec(answer);\n    if (options && options[4]) {\n      let frac = '';\n      if (options[3]) {\n        frac = options[3] === '=' ? '=' : 100;\n      } else if (options[2]) {\n        frac = options[2];\n      }\n      if (_qtype === 'NUMERICAL' || _qtype === 'NM') {\n        const tolerance = /^([^:]*):?(.*)/.exec(options[4])[2] || 0;\n        _answerdata.push({\n          id: getUuid(),\n          answer: strdecode(options[4].replace(/:.*/, '')),\n          feedback: strdecode(options[6]),\n          tolerance: tolerance,\n          fraction: frac,\n          fractionOptions: getFractionOptions(frac),\n          isCustomGrade: isCustomGrade(frac),\n        });\n        return;\n      }\n      _answerdata.push({\n        answer: strdecode(options[4]),\n        id: getUuid(),\n        feedback: strdecode(options[6]),\n        fraction: frac,\n        fractionOptions: getFractionOptions(frac),\n        isCustomGrade: isCustomGrade(frac),\n      });\n    }\n  });\n};\n\n/**\n * Insert a new set of answer blanks below the button.\n *\n * @method _addAnswer\n * @param {Node} a Node that is the referred element\n * @private\n */\nconst _addAnswer = function(a) {\n  let index = indexOfNode(_form.querySelectorAll('.' + CSS.ADD), a);\n  if (index === -1) {\n    index = 0;\n  }\n  let fraction = '';\n  let answer = '';\n  let feedback = '';\n  let tolerance = 0;\n  if (a.closest('li')) {\n    fraction = a.closest('li').querySelector('.' + CSS.FRACTION).value;\n    if (fraction === selectCustomPercent) {\n      fraction = a.closest('li').querySelector('.' + CSS.FRAC_CUSTOM).value;\n    }\n    answer = a.closest('li').querySelector('.' + CSS.ANSWER).value;\n    feedback = a.closest('li').querySelector('.' + CSS.FEEDBACK).value;\n    if (a.closest('li').querySelector('.' + CSS.TOLERANCE)) {\n      tolerance = a.closest('li').querySelector('.' + CSS.TOLERANCE).value;\n    }\n  }\n  _processFormData();\n  _answerdata.splice(index, 0, {\n    id: getUuid(),\n    answer: answer,\n    feedback: feedback,\n    fraction: fraction,\n    fractionOptions: getFractionOptions(fraction),\n    tolerance: tolerance,\n    isCustomGrade: isCustomGrade(fraction)\n  });\n  _setDialogueContent(_qtype, true);\n  _form.querySelectorAll('.' + CSS.ANSWER).item(index).focus();\n};\n\n/**\n * Delete set of answer next to the button.\n *\n * @method _deleteAnswer\n * @param {Node} a Node that is the referred element\n * @private\n */\nconst _deleteAnswer = function(a) {\n  let index = indexOfNode(_form.querySelectorAll('.' + CSS.DELETE), a);\n  if (index === -1) {\n    index = indexOfNode(_form.querySelectorAll('li'), a.closest('li'));\n  }\n  _processFormData();\n  _answerdata.splice(index, 1);\n  _setDialogueContent(_qtype, true);\n  const answers = _form.querySelectorAll('.' + CSS.ANSWER);\n  index = Math.min(index, answers.length - 1);\n  answers.item(index).focus();\n};\n\n/**\n * Lower answer option\n *\n * @method _lowerAnswer\n * @param {Node} a Node that is the referred element\n * @private\n */\nconst _lowerAnswer = function(a) {\n  const li = a.closest('li');\n  li.before(li.nextSibling);\n  li.querySelector('.' + CSS.ANSWER).focus();\n};\n\n/**\n * Raise answer option\n *\n * @method _raiseAnswer\n * @param {Node} a Node that is the referred element\n * @private\n */\nconst _raiseAnswer = function(a) {\n  const li = a.closest('li');\n  li.after(li.previousSibling);\n  li.querySelector('.' + CSS.ANSWER).focus();\n};\n\n/**\n * Reset and hide form.\n *\n * @method _cancel\n * @param {Event} e Event from button click\n * @private\n */\nconst _cancel = function(e) {\n  e.preventDefault();\n  // In case there is a marker where the new question should be inserted in the text it needs to be removed.\n  for (const span of _editor.dom.select('.' + markerClass + '.new')) {\n    span.remove();\n  }\n  _modal.destroy();\n  _editor.focus();\n  _modal = null;\n};\n\n/**\n * Insert question string into editor content and reset and hide form. If the form contains an error\n * nothing happens.\n *\n * @method _setSubquestion\n * @param {Event} e Event from button click\n * @private\n */\nconst _setSubquestion = function(e) {\n  e.preventDefault();\n  // Check if there are any errors and if so, fill the error container with the\n  // messages and return without going any further and closing the dialogue.\n  const errMsg = _form.querySelector('.msg-error');\n  const formErrors = _processFormData(true);\n  if (formErrors.length > 0) {\n    const unique = formErrors.filter((value, index, array) => array.indexOf(value) === index);\n    errMsg.innerHTML = '<ul><li>' + unique.join('</li><li>') + '</li></ul>';\n    errMsg.classList.remove('hidden');\n    return;\n  } else {\n    errMsg.classList.add('hidden');\n  }\n  // Build the parser function from the data, that is going to be placed into the editor content.\n  let question = '{' + _marks + ':' + _qtype + ':';\n\n  for (let i = 0; i < _answerdata.length; i++) {\n    question += _answerdata[i].fraction && !isNaN(_answerdata[i].fraction)\n      ? '%' + _answerdata[i].fraction + '%' : _answerdata[i].fraction;\n    question += strencode(_answerdata[i].answer);\n    if (_qtype === 'NM' || _qtype === 'NUMERICAL') {\n      question += ':' + _answerdata[i].tolerance;\n    }\n    if (_answerdata[i].feedback) {\n      question += '#' + strencode(_answerdata[i].feedback);\n    }\n    if (i < _answerdata.length - 1) {\n      question += '~';\n    }\n  }\n  question += '}';\n\n  _modal.destroy();\n  _modal = null;\n  _editor.focus();\n  if (_selectedOffset > -1) { // We have to replace one of the marker spans (the innerHTML contains the question string).\n    _editor.dom.select('.' + markerClass)[_selectedOffset].innerHTML = question;\n  } else {\n    // Just add the question text with markup.\n    _editor.insertContent(markerSpan + question + '</span>');\n  }\n};\n\n/**\n * Read the form data, process it and store the result in the internal  _answerdata array.\n * Also, if validation is enabled, the custom_grade field is in use and does not contain\n * a number, then the field is marked as an error and the return value is false.\n *\n * @method _processFormData\n * @param {boolean} validate\n * @return {Array}\n * @private\n */\nconst _processFormData = function(validate) {\n  _answerdata = [];\n  let answer;\n  let tolerance = 0;\n  let hasErrors = [];\n  let foundCorrect = false;\n  const answers = _form.querySelectorAll('.' + CSS.ANSWER);\n  const feedbacks = _form.querySelectorAll('.' + CSS.FEEDBACK);\n  const fractions = _form.querySelectorAll('.' + CSS.FRACTION);\n  const customGrades = _form.querySelectorAll('.' + CSS.FRAC_CUSTOM);\n  const tolerances = _form.querySelectorAll('.' + CSS.TOLERANCE);\n  for (let i = 0; i < answers.length; i++) {\n    answers.item(i).classList.remove('error');\n    customGrades.item(i).classList.remove('error');\n    answer = answers.item(i).value;\n    // For numerical questions we need to check if the answer and tolerance is a number.\n    if (_qtype === 'NM' || _qtype === 'NUMERICAL') {\n      answer = Number(answer);\n      tolerance = Number(tolerances.item(i).value);\n      tolerances.item(i).classList.remove('error');\n      if (validate) {\n        if (isNaN(answer)) {\n          answers.item(i).classList.add('error');\n          hasErrors.push(STR.err_not_numeric);\n        }\n        if (isNaN(tolerance)) {\n          tolerances.item(i).classList.add('error');\n          hasErrors.push(STR.err_not_numeric);\n        }\n      }\n    }\n    const currentAnswer = {\n      answer: answer,\n      id: getUuid(),\n      feedback: feedbacks.item(i).value,\n      fraction: fractions.item(i).value === selectCustomPercent ? customGrades.item(i).value : fractions.item(i).value,\n      fractionOptions: getFractionOptions(fractions.item(i).value),\n      tolerance: tolerance,\n      isCustomGrade: fractions.item(i).value === selectCustomPercent\n    };\n    if (validate) {\n      // When custom grades are used, the value must be a number between -100 and 100 (percent).\n      if (currentAnswer.isCustomGrade &&\n        (isNaN(currentAnswer.fraction) || currentAnswer.fraction < -100 || currentAnswer.fraction > 100\n          || currentAnswer.fraction.trim() === '')\n      ) {\n        hasErrors.push(STR.err_custom_rate);\n        customGrades.item(i).classList.add('error');\n      }\n      // We found a correct answer, when grade is marked as 100 or \"=\" and the answer is not empty.\n      if ((currentAnswer.fraction === '100' || currentAnswer.fraction === '=') && answers.item(i).value.trim() !== '') {\n        foundCorrect = true;\n      }\n    }\n    _answerdata.push(currentAnswer);\n    _marks = _form.querySelector('.' + CSS.MARKS).value;\n  }\n  if (!validate) {\n    return hasErrors;\n  }\n  return hasErrors.concat(_applyErrorsOnAnswers(answers, foundCorrect));\n};\n\n/**\n * Iterate over all answer data, check for empty answers and incorrect grades. Apply the\n * error class to the appropriate fields and return an array with error messages that are\n * displayed on top of the response fiels.\n * If there are correct answers, then eliminate all empty answers.\n *\n * @method _applyErrorsOnAnswers\n * @param {NodeList} answers\n * @param {Boolean} foundCorrectAnswer\n * @return {Array}\n * @private\n */\nconst _applyErrorsOnAnswers = function(answers, foundCorrectAnswer) {\n  if (foundCorrectAnswer) {\n    for (let i = 0; i < _answerdata.length; i++) {\n      if (answers.item(i).value.trim() === '') {\n        _answerdata.splice(i, 1);\n      }\n    }\n    return [];\n  }\n  let hasErrors = [];\n  let focusFirst = false;\n  let noneCorrect = true; // The grade has a value that marks the answer as not correct.\n  for (let i = 0; i < answers.length; i++) {\n    // Check for non-empty value in the original input and mark them with an error.\n    if (answers.item(i).value.trim() === '') {\n      answers.item(i).classList.add('error');\n      if (!focusFirst) {\n        hasErrors.push(STR.err_empty_answer);\n        answers.item(i).focus();\n        focusFirst = true;\n      }\n    }\n    if (_answerdata[i].fraction === '100' || _answerdata[i].fraction === '=') {\n      noneCorrect = false;\n    }\n  }\n  if (noneCorrect) {\n    hasErrors.push(STR.err_none_correct);\n  }\n  return hasErrors;\n};\n\n/**\n * Check whether cursor is in a subquestion and return subquestion text if\n * true.\n *\n * @method resolveSubquestion\n * @return {Mixed} The selected node of with the subquestion if found, false otherwise.\n */\nconst resolveSubquestion = function() {\n  let span = _editor.selection.getStart();\n  if (!isNull(span.classList) && span.classList.contains(markerClass)) {\n    return span;\n  }\n  _editor.dom.getParents(span, elm => {\n    // Are we in a span that encapsulates the cloze question?\n    if (!isNull(elm.classList) && elm.classList.contains(markerClass)) {\n      return elm;\n    }\n    return false;\n  });\n  return false;\n};\n\nexport {\n  displayDialogue,\n  resolveSubquestion,\n  onInit,\n  onBeforeGetContent,\n  onSubmit,\n};\n"],"names":["isNull","a","strdecode","t","String","replace","strencode","indexOfNode","list","node","i","length","getUuid","crypto","randomUUID","Math","floor","random","toString","getFractionOptions","s","attrSel","isSel","html","STR","incorrect","correct","FRACTIONS","forEach","item","value","indexOf","custom_grade","isCustomGrade","found","markerClass","markerSpan","reQtype","CSS","ANSWER","ANSWERS","ADD","CANCEL","DELETE","FEEDBACK","FRACTION","FRAC_CUSTOM","LEFT","LOWER","RIGHT","MARKS","DUPLICATE","RAISE","SUBMIT","SUMMARY","TOLERANCE","TYPE","TEMPLATE","FORM","M","util","image_url","FOOTER","getQuestionTypes","multichoice","summary_multichoice","selectinline","singleyes","horizontal","vertical","shuffle","multiresponse","multi_vertical","singleno","multi_horizontal","numerical","summary_numerical","shortanswer","summary_shortanswer","caseno","caseyes","regexp","summary_regexp","_editor","_form","_answerdata","_qtype","_selectedOffset","_marks","_modal","_firstAnswer","ed","_addMarkers","async","key","component","then","args","Array","from","arguments","map","l","catch","getStr","_createModal","cfg","title","templateContext","elementid","id","removeOnClose","large","Modal","create","ModalFactory","subquestion","resolveSubquestion","dom","select","_parseSubquestion","innerHTML","_setDialogueContent","selection","getContent","m","content","newContent","match","pos","substring","level","b","setContent","_removeMarkers","span","setOuterHTML","classList","contains","source_view","onClose","off","on","qtype","nomodalevents","footer","Mustache","render","cancel","btn_cancel","submit","btn_insert","btn_select","contentText","answerdata","name","filter","q","type","marks","types","setBody","setFooter","show","$root","getRoot","get","querySelector","registerEventListeners","registerCloseOnSave","registerCloseOnCancel","ModalEvents","_cancel","save","_choiceHandler","_setSubquestion","getTarget","e","p","target","nodeType","tagName","parentNode","addEventListener","preventDefault","_deleteAnswer","_addAnswer","_lowerAnswer","_raiseAnswer","querySelectorAll","sel","getAttribute","document","getElementById","remove","add","max","blankAnswer","answer","feedback","fraction","fractionOptions","tolerance","x","push","destroy","focus","question","parts","exec","lastIndex","abbr","answers","options","frac","index","closest","_processFormData","splice","min","li","before","nextSibling","after","previousSibling","errMsg","formErrors","unique","array","join","isNaN","insertContent","validate","hasErrors","foundCorrect","feedbacks","fractions","customGrades","tolerances","Number","err_not_numeric","currentAnswer","trim","err_custom_rate","concat","_applyErrorsOnAnswers","foundCorrectAnswer","focusFirst","noneCorrect","err_empty_answer","err_none_correct","getStart","getParents","elm"],"mappings":"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"}